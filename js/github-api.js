const GITHUB_API_BASE="https://api.github.com",REPO_OWNER="dayun126",REPO_NAME="dayun",BRANCH="main",DECRYPT_SALT="k7m3p",ENCRYPTED_TOKEN="sPhx6l72hLbmr1Ab1pHvTXMaMFMCAqMH0kaI8L5FlunmtXr9hPV6m/dbX+w0MrPbR46GU0dps+QCu2C6OAz2JH65EuZE9kGVyzXhRQA2/jzTIS+QPe2FDE+SLP2Bxe8zp8JUiQMb8mw8JSFQZjWqBA==",FILE_MAPPING={activation:"Permission.txt",filter:"README.md",log:"log.txt"};async function decryptToken(t){try{const e=t+"k7m3p",n=(new TextEncoder).encode(e),o=await crypto.subtle.digest("SHA-256",n),a=await window.crypto.subtle.importKey("raw",o,{name:"AES-CBC"},!1,["decrypt"]),r=atob(ENCRYPTED_TOKEN),s=new Uint8Array(r.length);for(let t=0;t<r.length;t++)s[t]=r.charCodeAt(t);const c=s.slice(0,16),i=s.slice(16),w=await window.crypto.subtle.decrypt({name:"AES-CBC",iv:c},a,i);return(new TextDecoder).decode(w).trim()}catch(t){throw new Error("解密失败")}}async function getGitHubHeaders(){try{const t=sessionStorage.getItem("auth_key");if(!t)throw new Error("未授权访问");return{Authorization:`token ${await decryptToken(t)}`,Accept:"application/vnd.github.v3+json"}}catch(t){throw t}}function decodeBase64Content(t){try{return decodeURIComponent(escape(atob(t)))}catch(e){return atob(t)}}async function getFileContent(t){try{const e=FILE_MAPPING[t];if(!e)throw new Error(`未找到对应的文件名: ${t}`);const n=await getGitHubHeaders(),o=(new Date).getTime(),a=`${GITHUB_API_BASE}/repos/dayun126/dayun/contents/${e}?ref=main&t=${o}`,r=await fetch(a,{headers:n,cache:"no-store"});if(!r.ok){if(404===r.status)return{content:"",sha:"",fileExists:!1};const t=await r.json();throw new Error(`获取文件失败: ${r.status} - ${t.message||"未知错误"}`)}const s=await r.json();return{content:decodeBase64Content(s.content),sha:s.sha,fileExists:!0}}catch(t){throw t}}async function updateFileContent(t,e,n){try{if(!n)throw new Error("文件不存在，无法保存");const o=await getGitHubHeaders(),a=`${GITHUB_API_BASE}/repos/dayun126/dayun/contents/${t}`,r={message:`通过Chrome扩展更新 ${t}`,content:btoa(unescape(encodeURIComponent(e))),sha:n,branch:"main"},s=await fetch(a,{method:"PUT",headers:o,body:JSON.stringify(r)});if(!s.ok){const t=await s.json();if(409===s.status)throw new Error("文件已被修改，请重新获取后再保存");throw new Error(`更新文件失败: ${s.status} - ${t.message||"未知错误"}`)}return{success:!0,sha:(await s.json()).content.sha}}catch(t){throw t}}window.GitHubAPI={getFileContent:getFileContent,updateFileContent:updateFileContent};